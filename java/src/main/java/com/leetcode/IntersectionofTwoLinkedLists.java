package com.leetcode;import java.util.List;import java.util.Stack;/** * 160. Intersection of Two Linked Lists *  * DESCRIPTION: * Write a program to find the node at which the intersection of two singly linked lists begins. * For example, the following two linked lists: *  A:          a1 → a2 *  ↘ *  c1 → c2 → c3 *  ↗ *  B:     b1 → b2 → b3 * begin to intersect at node c1. *  * Notes: * If the two linked lists have no intersection at all, return null. * The linked lists must retain their original structure after the function returns. * You may assume there are no cycles anywhere in the entire linked structure. * Your code should preferably run in O(n) time and use only O(1) memory. *  * Skill:  * 计算长度 * 先把长的往后走走到短的一样长度处 * 再一一比较 * */ public class IntersectionofTwoLinkedLists {    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {        Stack<ListNode> stack1 = new Stack<>(), stack2 = new Stack<>();        while (headA != null) {            stack1.push(headA);            headA = headA.next;        }        while (headB != null) {            stack2.push(headB);            headB = headB.next;        }        ListNode common = null;        while (!stack1.isEmpty() && !stack2.isEmpty() && stack1.peek() == stack2.peek()) {            common = stack1.pop();            stack2.pop();        }        return common;    }	private static class ListNode {		int val;		ListNode next;		ListNode(int x) {			val = x;			next = null;		}	}}